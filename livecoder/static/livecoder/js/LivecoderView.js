// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["d3", "underscore", "inlet", "backbone", "codemirror/lib/codemirror", "widgets/js/widget", "base/js/namespace", "codemirror/mode/javascript/javascript", "codemirror/mode/css/css", "jshint", "codemirror/addon/lint/lint", "codemirror/addon/lint/javascript-lint", "codemirror/addon/fold/foldcode", "codemirror/addon/fold/foldgutter", "codemirror/addon/fold/brace-fold", "codemirror/addon/fold/comment-fold"], function(d3, _, Inlet, Backbone, CodeMirror, widget, arg) {
    var LivecoderView, notebook, panes;
    notebook = arg.notebook;
    panes = {
      html: {
        icon: "html5",
        cm: {
          mode: "xml"
        }
      },
      script: {
        icon: "code",
        cm: {
          mode: "javascript",
          lint: true
        }
      },
      style: {
        icon: "css3",
        cm: {
          mode: "css"
        }
      }
    };
    return LivecoderView = (function(superClass) {
      extend(LivecoderView, superClass);

      function LivecoderView() {
        this.m = bind(this.m, this);
        this.initCodeMirror = bind(this.initCodeMirror, this);
        this.iframeLoaded = bind(this.iframeLoaded, this);
        this.theme = bind(this.theme, this);
        this.updateButtons = bind(this.updateButtons, this);
        this.update = bind(this.update, this);
        this.render = bind(this.render, this);
        return LivecoderView.__super__.constructor.apply(this, arguments);
      }

      LivecoderView.prototype.className = "livecoder container-fluid";

      LivecoderView.prototype.render = function() {
        notebook.keyboard_manager.register_events(this.$el);
        this.d3 = d3.select(this.el).style({
          width: "100%"
        });
        this.$theme = d3.select("head").append("link").attr({
          rel: "stylesheet",
          href: this.theme()
        });
        this.$inRow = this.d3.append("div").classed({
          row: 1,
          "livecoder-in-row": 1
        });
        this.$bar = this.d3.append("div").classed({
          "col-md-6": 1
        }).append("div").classed({
          "btn-group": 1
        });
        this.$btn = this.$bar.selectAll(".btn").data(d3.entries(panes)).enter().append("button").classed({
          btn: 1,
          "btn-default": 1,
          "btn-mini": 1
        }).call(function(btn) {
          btn.append("i").attr({
            "class": function(d) {
              return "fa-" + d.value.icon;
            }
          }).classed({
            fa: 1,
            "fa-fw": 1
          });
          return btn.append("span").text(function(arg1) {
            var key;
            key = arg1.key;
            return key;
          });
        }).on("click", (function(_this) {
          return function(d) {
            return _this.m("_active", d.key);
          };
        })(this));
        this.$outRow = this.d3.append("div").classed({
          row: 1,
          "livecoder-out-row": 1
        });
        this.$out = this.$outRow.append("div").classed({
          "col-md-12": 1
        });
        this.$iframe = this.$out.append("iframe").attr({
          src: "/nbextensions/livecoder/iframe.html"
        }).on("load", this.iframeLoaded());
        return _.defer(this.update);
      };

      LivecoderView.prototype.update = function() {
        var cm, pane, ref, results;
        this.updateButtons();
        if (!this.cm) {
          this.initCodeMirror();
        }
        if ("_theme" in this.model.changed) {
          this.$theme.attr({
            href: this.theme()
          });
          ref = this.cm;
          results = [];
          for (pane in ref) {
            cm = ref[pane];
            results.push(cm.setOption("theme", this.m("_theme")));
          }
          return results;
        }
      };

      LivecoderView.prototype.updateButtons = function() {
        var active;
        active = (this.m("_active")) || "script";
        return this.$btn.classed({
          active: function(arg1) {
            var key;
            key = arg1.key;
            return key === active;
          }
        });
      };

      LivecoderView.prototype.theme = function() {
        return "/static/components/codemirror/theme/" + (this.m('_theme')) + ".css";
      };

      LivecoderView.prototype.iframeLoaded = function() {
        var view;
        view = this;
        return function() {
          return this.contentWindow._livecoder = view.model;
        };
      };

      LivecoderView.prototype.initCodeMirror = function() {
        this.cm = {};
        return d3.entries(panes).map((function(_this) {
          return function(arg1) {
            var cm, div, key, value;
            key = arg1.key, value = arg1.value;
            div = _this.$inRow.append("div").classed({
              "col-md-4": 1
            });
            cm = _this.cm[key] = new CodeMirror(div.node(), _.extend({}, value.cm, {
              value: value.value ? value.value.call(_this) : _this.m("_" + key),
              gutters: ["CodeMirror-lint-markers"],
              theme: _this.m("_theme"),
              matchBrackets: true,
              autoCloseBrackets: true,
              foldGutter: true,
              tabSize: 2,
              extraKeys: {
                Tab: function(cm) {
                  return cm.replaceSelection(Array(cm.getOption("indentUnit") + 1).join(" "));
                }
              }
            }));
            Inlet(cm);
            cm.on("change", function() {
              _this.m("_" + key, cm.getValue());
              return _this.touch();
            });
            return _.delay((function() {
              return cm.refresh();
            }), 200);
          };
        })(this));
      };

      LivecoderView.prototype.m = function(name, val) {
        if (arguments.length === 1) {
          if (typeof name === "string") {
            return this.model.get(name);
          }
          this.model.set(name);
          return this;
        }
        this.model.set(name, val);
        return this;
      };

      return LivecoderView;

    })(widget.WidgetView);
  });

}).call(this);
