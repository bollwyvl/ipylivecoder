// Generated by CoffeeScript 1.9.3
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["d3", "underscore", "inlet", "codemirror/lib/codemirror", "widgets/js/widget", "base/js/namespace", "codemirror/mode/javascript/javascript"], function(d3, _, Inlet, CodeMirror, widget, IPython) {
    var LivecoderView;
    return LivecoderView = (function(superClass) {
      extend(LivecoderView, superClass);

      function LivecoderView() {
        this.m = bind(this.m, this);
        this.initCodeMirror = bind(this.initCodeMirror, this);
        this.iframeLoaded = bind(this.iframeLoaded, this);
        this.update = bind(this.update, this);
        this.render = bind(this.render, this);
        return LivecoderView.__super__.constructor.apply(this, arguments);
      }

      LivecoderView.prototype.className = "livecoder container-fluid";

      LivecoderView.prototype.render = function() {
        IPython.notebook.keyboard_manager.register_events(this.$el);
        this.d3 = d3.select(this.el).style({
          width: "100%"
        });
        this.$row = this.d3.append("div").classed({
          "row": 1
        });
        this.$out = this.$row.append("div").classed({
          "col-md-6": 1
        });
        this.$iframe = this.$out.append("iframe").attr({
          src: "/nbextensions/livecoder/iframe.html"
        }).on("load", this.iframeLoaded());
        this.$in = this.$row.append("div").classed({
          "col-md-6": 1
        });
        return _.defer(this.update);
      };

      LivecoderView.prototype.update = function() {
        if (!this.cm) {
          return this.initCodeMirror();
        }
      };

      LivecoderView.prototype.iframeLoaded = function() {
        var view;
        view = this;
        return function() {
          return this.contentWindow._livecoder = view.model;
        };
      };

      LivecoderView.prototype.initCodeMirror = function() {
        this.cm = new CodeMirror(this.$in.node(), {
          mode: "javascript",
          value: this.m("script") || "",
          lineNumbers: true
        });
        Inlet(this.cm);
        return this.cm.on("change", (function(_this) {
          return function() {
            _this.m("script", _this.cm.getValue());
            return _this.touch();
          };
        })(this));
      };

      LivecoderView.prototype.m = function(name, val) {
        if (arguments.length === 1) {
          if (typeof name === "string") {
            return this.model.get(name);
          }
          this.model.set(name);
          return this;
        }
        this.model.set(name, val);
        return this;
      };

      return LivecoderView;

    })(widget.DOMWidgetView);
  });

}).call(this);
