// Generated by CoffeeScript 1.9.3
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  define(["underscore", "inlet", "codemirror/lib/codemirror", "codemirror/addon/scroll/simplescrollbars", "codemirror/addon/lint/lint", "codemirror/addon/fold/foldcode", "codemirror/addon/fold/foldgutter", "codemirror/addon/fold/brace-fold", "codemirror/addon/fold/comment-fold"], function(_, Inlet, CodeMirror) {
    var Pane, SourcePane;
    Pane = (function() {
      function Pane() {}

      return Pane;

    })();
    SourcePane = (function(superClass) {
      extend(SourcePane, superClass);

      function SourcePane() {
        return SourcePane.__super__.constructor.apply(this, arguments);
      }

      SourcePane.prototype.cm_defaults = {
        matchBrackets: true,
        lineWrapping: true,
        autoCloseBrackets: true,
        foldGutter: true,
        tabSize: 2,
        scrollbarStyle: "simple",
        extraKeys: {
          Tab: function(cm) {
            return cm.replaceSelection(Array(cm.getOption("indentUnit") + 1).join(" "));
          }
        }
      };

      SourcePane.prototype.value = function() {
        return this.model.get(this.attr);
      };

      SourcePane.prototype.init = function(el, view) {
        this.model = view.model;
        this.cm = new CodeMirror(el.node(), _.extend({}, this.cm_defaults, this.cm_opts, {
          value: this.value(),
          theme: view.m("_theme")
        }));
        Inlet(this.cm);
        view.listenTo(this.model, "change:_theme", (function(_this) {
          return function() {
            return _this.cm.setOption("theme", view.m("_theme"));
          };
        })(this));
        this.cm.on("inputRead", (function(_this) {
          return function() {
            view.m(_this.attr, _this.cm.getValue());
            return view.touch();
          };
        })(this));
        return _.delay(((function(_this) {
          return function() {
            return _this.cm.refresh();
          };
        })(this)), 200);
      };

      return SourcePane;

    })(Pane);
    return {
      Pane: Pane,
      SourcePane: SourcePane
    };
  });

}).call(this);
